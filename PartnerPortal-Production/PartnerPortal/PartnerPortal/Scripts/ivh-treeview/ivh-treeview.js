angular.module("ivh.treeview", []), angular.module("ivh.treeview").directive("ivhTreeviewCheckboxHelper", [function () { "use strict"; return { restrict: "A", scope: { node: "=ivhTreeviewCheckboxHelper" }, require: "^ivhTreeview", link: function (e, t, i, n) { var r = e.node, l = n.opts(), a = l.indeterminateAttribute, o = l.selectedAttribute; e.isSelected = r[o], e.trvw = n, e.resolveIndeterminateClick = function () { r[a] && n.select(r, !0) }, e.$watch("node." + o, function (t, i) { e.isSelected = t }), e.$watch("node." + a, function (e, i) { t.find("input").prop("indeterminate", e) }) }, template: ['<input type="checkbox"', 'class="ivh-treeview-checkbox"', 'ng-model="isSelected"', 'ng-click="resolveIndeterminateClick()"', 'ng-change="trvw.select(node, isSelected)" />'].join("\n") } }]), angular.module("ivh.treeview").directive("ivhTreeviewCheckbox", [function () { "use strict"; return { restrict: "AE", require: "^ivhTreeview", template: '<span ivh-treeview-checkbox-helper="node"></span>' } }]), angular.module("ivh.treeview").directive("ivhTreeviewChildren", function () { "use strict"; return { restrict: "AE", require: "^ivhTreeviewNode", template: ['<ul ng-if="getChildren().length" class="ivh-treeview">', '<li ng-repeat="child in getChildren()"', 'ng-hide="trvw.hasFilter() && !trvw.isVisible(child)"', 'class="ivh-treeview-node"', "ng-class=\"{'ivh-treeview-node-collapsed': !trvw.isExpanded(child) && !trvw.isLeaf(child)}\"", 'ivh-treeview-node="child"', 'ivh-treeview-depth="childDepth">', "</li>", "</ul>"].join("\n") } }), angular.module("ivh.treeview").directive("ivhTreeviewNode", ["ivhTreeviewCompiler", function (e) { "use strict"; return { restrict: "A", scope: { node: "=ivhTreeviewNode", depth: "=ivhTreeviewDepth" }, require: "^ivhTreeview", compile: function (t) { return e.compile(t, function (e, t, i, n) { var r = e.node, l = e.getChildren = function () { return n.children(r) }; e.trvw = n, e.childDepth = e.depth + 1, n.expand(r, n.isInitiallyExpanded(e.depth)), e.$watch(function () { return l().length > 0 }, function (e) { e ? t.removeClass("ivh-treeview-node-leaf") : t.addClass("ivh-treeview-node-leaf") }) }) } } }]), angular.module("ivh.treeview").directive("ivhTreeviewToggle", [function () { "use strict"; return { restrict: "A", require: "^ivhTreeview", link: function (e, t, i, n) { var r = e.node; t.addClass("ivh-treeview-toggle"), t.bind("click", function () { n.isLeaf(r) || e.$apply(function () { n.toggleExpanded(r), n.onToggle(r) }) }) } } }]), angular.module("ivh.treeview").directive("ivhTreeviewTwistie", ["$compile", "ivhTreeviewOptions", function (e, t) { "use strict"; var i = t(); return { restrict: "A", require: "^ivhTreeview", template: ['<span class="ivh-treeview-twistie">', '<span class="ivh-treeview-twistie-collapsed">', i.twistieCollapsedTpl, "</span>", '<span class="ivh-treeview-twistie-expanded">', i.twistieExpandedTpl, "</span>", '<span class="ivh-treeview-twistie-leaf">', "&nbsp;&nbsp;&nbsp;", "</span>", "</span>"].join("\n"), link: function (t, n, r, l) { if (l.hasLocalTwistieTpls) { var a = l.opts(), o = n.children().eq(0).children(); angular.forEach(["twistieCollapsedTpl", "twistieExpandedTpl", "twistieLeafTpl"], function (n, r) { var l = a[n], s = i[n]; if (l && l !== s) { ("<" !== l.substr(0, 1) || ">" !== l.substr(-1, 1)) && (l = "<span>" + l + "</span>"); var u = e(l)(t), c = o.eq(r); c.html("").append(u) } }) } } } }]), angular.module("ivh.treeview").directive("ivhTreeview", ["ivhTreeviewMgr", function (e) { "use strict"; return { restrict: "A", transclude: !0, scope: { root: "=ivhTreeview", childrenAttribute: "=ivhTreeviewChildrenAttribute", defaultSelectedState: "=ivhTreeviewDefaultSelectedState", expandToDepth: "=ivhTreeviewExpandToDepth", idAttribute: "=ivhTreeviewIdAttribute", indeterminateAttribute: "=ivhTreeviewIndeterminateAttribute", expandedAttribute: "=ivhTreeviewExpandedAttribute", labelAttribute: "=ivhTreeviewLabelAttribute", nodeTpl: "=ivhTreeviewNodeTpl", selectedAttribute: "=ivhTreeviewSelectedAttribute", onCbChange: "&ivhTreeviewOnCbChange", onToggle: "&ivhTreeviewOnToggle", twistieCollapsedTpl: "=ivhTreeviewTwistieCollapsedTpl", twistieExpandedTpl: "=ivhTreeviewTwistieExpandedTpl", twistieLeafTpl: "=ivhTreeviewTwistieLeafTpl", useCheckboxes: "=ivhTreeviewUseCheckboxes", validate: "=ivhTreeviewValidate", visibleAttribute: "=ivhTreeviewVisibleAttribute", userOptions: "=ivhTreeviewOptions", filter: "=ivhTreeviewFilter" }, controllerAs: "trvw", controller: ["$scope", "$element", "$attrs", "$transclude", "ivhTreeviewOptions", "filterFilter", function (t, i, n, r, l, a) { var o = angular, s = this, u = o.extend({}, l(), t.userOptions); o.forEach(["childrenAttribute", "defaultSelectedState", "expandToDepth", "idAttribute", "indeterminateAttribute", "expandedAttribute", "labelAttribute", "nodeTpl", "selectedAttribute", "twistieCollapsedTpl", "twistieExpandedTpl", "twistieLeafTpl", "useCheckboxes", "validate", "visibleAttribute"], function (e) { o.isDefined(t[e]) && (u[e] = t[e]) }); var c = function (e) { return "ivhTreeview" + e.charAt(0).toUpperCase() + e.slice(1) }; o.forEach(["onCbChange", "onToggle"], function (e) { n[c(e)] && (u[e] = t[e]) }); var d; r(function (e, t) { var i = ""; angular.forEach(e, function (e) { i += (e.innerHTML || "").trim() }), i.length && (d = t, u.nodeTpl = i) }), s.opts = function () { return u }; var v = t.userOptions || {}; s.hasLocalTwistieTpls = !!(v.twistieCollapsedTpl || v.twistieExpandedTpl || v.twistieLeafTpl || t.twistieCollapsedTpl || t.twistieExpandedTpl || t.twistieLeafTpl), s.children = function (e) { var t = e[u.childrenAttribute]; return o.isArray(t) ? t : [] }, s.label = function (e) { return e[u.labelAttribute] }, s.hasFilter = function () { return o.isDefined(t.filter) }, s.getFilter = function () { return t.filter || "" }, s.isVisible = function (e) { var t = s.getFilter(); if (!t || a([e], t).length) return !0; if ("object" == typeof t || "function" == typeof t) for (var i = s.children(e), n = i.length; n--;) if (s.isVisible(i[n])) return !0; return !1 }, s.useCheckboxes = function () { return u.useCheckboxes }, s.select = function (i, n) { e.select(t.root, i, u, n), s.onCbChange(i, n) }, s.isSelected = function (e) { return e[u.selectedAttribute] }, s.toggleSelected = function (e) { var t = !e[u.selectedAttribute]; s.select(e, t) }, s.expand = function (i, n) { e.expand(t.root, i, u, n) }, s.isExpanded = function (e) { return e[u.expandedAttribute] }, s.toggleExpanded = function (e) { s.expand(e, !s.isExpanded(e)) }, s.isInitiallyExpanded = function (e) { var t = -1 === u.expandToDepth ? 1 / 0 : u.expandToDepth; return t > e }, s.isLeaf = function (e) { return 0 === s.children(e).length }, s.getNodeTpl = function () { return u.nodeTpl }, s.root = function () { return t.root }, s.onToggle = function (e) { if (u.onToggle) { var i = { ivhNode: e, ivhIsExpanded: s.isExpanded(e), ivhTree: t.root }; u.onToggle(i) } }, s.onCbChange = function (e, i) { if (u.onCbChange) { var n = { ivhNode: e, ivhIsSelected: i, ivhTree: t.root }; u.onCbChange(n) } } }], link: function (t, i, n) { var r = t.trvw.opts(); r.validate && e.validate(t.root, r) }, template: ['<ul class="ivh-treeview">', '<li ng-repeat="child in root | ivhTreeviewAsArray"', 'ng-hide="trvw.hasFilter() && !trvw.isVisible(child)"', 'class="ivh-treeview-node"', "ng-class=\"{'ivh-treeview-node-collapsed': !trvw.isExpanded(child) && !trvw.isLeaf(child)}\"", 'ivh-treeview-node="child"', 'ivh-treeview-depth="0">', "</li>", "</ul>"].join("\n") } }]), angular.module("ivh.treeview").filter("ivhTreeviewAsArray", function () { "use strict"; return function (e) { return !angular.isArray(e) && angular.isObject(e) ? [e] : e } }), angular.module("ivh.treeview").factory("ivhTreeviewBfs", ["ivhTreeviewOptions", function (e) { "use strict"; var t = angular; return function (i, n, r) { 2 === arguments.length && t.isFunction(n) && (r = n, n = {}), n = angular.extend({}, e(), n), r = r || t.noop; var l, a, o, s, u, c = [], d = n.childrenAttribute; for (t.isArray(i) ? (t.forEach(i, function (e) { c.push([e, []]) }), l = c.shift()) : l = [i, []]; l;) { if (a = l[0], o = l[1], r(a, o) !== !1 && a[d] && t.isArray(a[d])) for (u = a[d].length, s = 0; u > s; s++) c.push([a[d][s], [a].concat(o)]); l = c.shift() } } }]), angular.module("ivh.treeview").factory("ivhTreeviewCompiler", ["$compile", function (e) { "use strict"; return { compile: function (t, i) { angular.isFunction(i) && (i = { post: i }); var n; return { pre: i && i.pre ? i.pre : null, post: function (t, r, l, a) { n || (n = e(a.getNodeTpl())), n(t, function (e) { r.append(e) }), i && i.post && i.post.apply(null, arguments) } } } } }]), angular.module("ivh.treeview").factory("ivhTreeviewMgr", ["ivhTreeviewOptions", "ivhTreeviewBfs", function (e, t) { "use strict"; var i = angular, n = e(), r = {}, l = function (e) { e[this.selectedAttribute] = !1, e[this.indeterminateAttribute] = !1 }, a = function (e) { e[this.selectedAttribute] = !0, e[this.indeterminateAttribute] = !1 }, o = function (e) { var t = e[this.childrenAttribute], n = this.selectedAttribute, r = this.indeterminateAttribute, l = 0, a = 0; i.forEach(t, function (e, t) { e[n] ? l++ : e[r] && a++ }), 0 === l && 0 === a ? (e[n] = !1, e[r] = !1) : l === t.length ? (e[n] = !0, e[r] = !1) : (e[n] = !1, e[r] = !0) }, s = function (e, i, n, r) { var l = u(i), a = !0, o = n.idAttribute, s = null, c = []; return t(e, n, function (e, t) { var n = a && (l ? i === e[o] : i === e); return n && (a = !1, s = e, c = t), a }), r(s, c) }, u = function (e) { return i.isString(e) || i.isNumber(e) }; return r.select = function (e, s, c, d) { arguments.length > 2 && "boolean" == typeof c && (d = c, c = {}), c = i.extend({}, n, c), d = i.isDefined(d) ? d : !0; var v = u(s), h = !0, p = c.idAttribute; return t(e, c, function (e, n) { var r = h && (v ? s === e[p] : s === e); if (r) { h = !1; var u = d ? a.bind(c) : l.bind(c); t(e, c, u), i.forEach(n, o.bind(c)) } return h }), r }, r.selectAll = function (e, l, a) { arguments.length > 1 && "boolean" == typeof l && (a = l, l = {}), l = i.extend({}, n, l), a = i.isDefined(a) ? a : !0; var o = l.selectedAttribute, s = l.indeterminateAttribute; return t(e, l, function (e) { e[o] = a, e[s] = !1 }), r }, r.selectEach = function (e, t, n, l) { return i.forEach(t, function (t) { r.select(e, t, n, l) }), r }, r.deselect = function (e, t, i) { return r.select(e, t, i, !1) }, r.deselectAll = function (e, t) { return r.selectAll(e, t, !1) }, r.deselectEach = function (e, t, i) { return r.selectEach(e, t, i, !1) }, r.validate = function (e, l, a) { if (!e) return r; arguments.length > 1 && "boolean" == typeof l && (a = l, l = {}), l = i.extend({}, n, l), a = i.isDefined(a) ? a : l.defaultSelectedState; var o = l.selectedAttribute, s = l.indeterminateAttribute; return t(e, l, function (t, n) { return i.isDefined(t[o]) && t[o] !== a ? (r.select(e, t, l, !a), !1) : (t[o] = a, void (t[s] = !1)) }), r }, r.expand = function (e, t, l, a) { arguments.length > 2 && "boolean" == typeof l && (a = l, l = {}), l = i.extend({}, n, l), a = i.isDefined(a) ? a : !0; var o = u(t), c = l.expandedAttribute; return o ? s(e, t, l, function (e, t) { return e[c] = a, r }) : (t[c] = a, r) }, r.expandRecursive = function (e, l, a, o) { arguments.length > 2 && "boolean" == typeof a && (o = a, a = {}), l = i.isDefined(l) ? l : e, a = i.extend({}, n, a), o = i.isDefined(o) ? o : !0; var c, d = u(l), v = a.expandedAttribute; return d ? s(e, l, a, function (e, t) { c = e }) : c = l, c && t(c, a, function (e, t) { e[v] = o }), r }, r.collapse = function (e, t, i) { return r.expand(e, t, i, !1) }, r.collapseRecursive = function (e, t, i, n) { return r.expandRecursive(e, t, i, !1) }, r.expandTo = function (e, t, l, a) { arguments.length > 2 && "boolean" == typeof l && (a = l, l = {}), l = i.extend({}, n, l), a = i.isDefined(a) ? a : !0; var o = l.expandedAttribute, u = function (e) { e[o] = a }; return s(e, t, l, function (e, t) { return i.forEach(t, u), r }) }, r.collapseParents = function (e, t, i) { return r.expandTo(e, t, i, !1) }, r }]), angular.module("ivh.treeview").provider("ivhTreeviewOptions", function () { "use strict"; var e = { idAttribute: "id", labelAttribute: "label", childrenAttribute: "children", selectedAttribute: "selected", expandToDepth: 0, useCheckboxes: !0, validate: !0, indeterminateAttribute: "__ivhTreeviewIndeterminate", expandedAttribute: "__ivhTreeviewExpanded", defaultSelectedState: !0, twistieExpandedTpl: "(-)", twistieCollapsedTpl: "(+)", twistieLeafTpl: "o", nodeTpl: ['<div class="ivh-treeview-node-content" title="{{trvw.label(node)}}">', "<span ivh-treeview-toggle>", '<span class="ivh-treeview-twistie-wrapper" ivh-treeview-twistie></span>', "</span>", '<span class="ivh-treeview-checkbox-wrapper" ng-if="trvw.useCheckboxes()"', "ivh-treeview-checkbox>", "</span>", '<span class="ivh-treeview-node-label" ivh-treeview-toggle>', "{{trvw.label(node)}}", "</span>", "<div ivh-treeview-children></div>", "</div>"].join("\n") }; this.set = function (t) { angular.extend(e, t) }, this.$get = function () { return function () { return angular.copy(e) } } });